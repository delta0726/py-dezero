# ******************************************************************************
# Title       : ゼロから作るDeep Learning3 （フレームワーク編）
# Stage       : 1 微分を自動で求める
# Step        : 02 変数を生み出す関数
# Theme       : Variableクラスの実装
# Create Date : 2021/10/04
# Update Date : 2022/01/05
# Page        : P9 - P13
# ******************************************************************************


# ＜概要＞
# - 変数xとyをVariableクラスのインスタンスと仮定して、それらを処理できる関数をFunctionクラスとして実装
#   --- 変数と関数をクラス実装して処理


# ＜ポイント＞
# - Functionクラスで実装するメソッドは、Variableインスタンスを入力し、Variableインスタンスを出力する
# - Variableインスタンスの実際のデータは、インスタンス変数のdataに存在する
# - __call__メソッドとは、インスタンスそのものを関数のように呼び出すことを実現するための特殊メソッド


# ＜目次＞
# 0 準備
# 1 Functionクラスの実装
# 2 Functionクラスを使う


# 0 準備 --------------------------------------------------------------

# ライブラリ
import numpy as np

# クラス定義
# --- 実際のデータを変数として格納する
# --- Step1で実装済
class Variable:
    def __init__(self, data):
        self.data = data


# 1 Functionクラスの実装 -------------------------------------------------

# ＜ポイント＞
# - Functionクラスの__call__メソッド内部でメインの計算を行う


# クラス定義
# --- 関数をクラスとして実装（特殊メソッドの__call__を使用）
# --- input引数でVariableクラスを引数として受け取る
# --- Functionクラス内でメインの計算を行う（Step02-2で修正）
# --- 出力値
class Function:
    def __call__(self, input):
        x = input.data
        y = x ** 2
        output = Variable(y)
        return output


# 2 Functionクラスを使う -----------------------------------------------

# インスタンス生成
# --- x: 変数格納
# --- y: 関数定義を取得
x = Variable(np.array(10))
f = Function()

# 関数実行
y = f(x)

# 確認
print(type(y))
print(y.data)
